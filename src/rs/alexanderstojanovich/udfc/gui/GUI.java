/*
 * Copyright (C) 2019 Coa
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package rs.alexanderstojanovich.udfc.gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Coa
 */
public class GUI extends javax.swing.JFrame {

    // resources directory (folder)
    public static final String RESOURCES_DIR = "/rs/alexanderstojanovich/udfc/res/";
    // internal logic of the GUI

    // cool it's our new logo :)
    private static final String LOGO_FILE_NAME = "udfc_logo.png";
    // and logox variant with black outline
    private static final String LOGOX_FILE_NAME = "udfc_logox.png";

    // path to GNU General Public License logo
    private static final String LICENSE_LOGO_FILE_NAME = "gplv3_logo.png";

    // path to help
    private static final String HELP_FILE_NAME = "udfc_help.txt";

    // internal gui logic
    private GUILogic guiLogic;

    // choosen file as destination for export
    private File dstFile;

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        initPosition();
        initFontSelector();
        initColorButtons();
        initUDFCLogos();
        initDialog();
        List<JComponent> compList = new ArrayList<JComponent>();
        
        compList.add(jobOutDir);
        compList.add(jobGO);
        compList.add(jobSTOP);
        
        compList.add(fileExport);
        compList.add(fileExportAs);
        compList.add(fileSTOP);
        compList.add(fileReset);
        
        this.guiLogic = new GUILogic(this.palettePreview, this.jobProgress, compList);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileExporter = new javax.swing.JFileChooser();
        fontPanel = new javax.swing.JPanel();
        fontNameLabel = new javax.swing.JLabel();
        fontSelector = new javax.swing.JComboBox<>();
        fontBold = new javax.swing.JCheckBox();
        fontItalic = new javax.swing.JCheckBox();
        fontSizeLabel = new javax.swing.JLabel();
        fontSize = new javax.swing.JSpinner();
        firstCharSemicolon = new javax.swing.JLabel();
        textFirstChar = new javax.swing.JSpinner();
        lastCharSemicolon = new javax.swing.JLabel();
        textLastChar = new javax.swing.JSpinner();
        textMultiplierLabel = new javax.swing.JLabel();
        textMultiplier = new javax.swing.JSpinner();
        tstLabel = new javax.swing.JLabel();
        fontFormatSelector = new javax.swing.JComboBox<>();
        fontFormatLabel = new javax.swing.JLabel();
        fontPreviewButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        fontTestTextField = new javax.swing.JTextField();
        udfc_suppd_label = new javax.swing.JLabel();
        effectsPanel = new javax.swing.JPanel();
        fgLabel = new javax.swing.JLabel();
        fgButton = new javax.swing.JButton();
        bgLabel = new javax.swing.JLabel();
        bgButton = new javax.swing.JButton();
        useGradient = new javax.swing.JCheckBox();
        useOutline = new javax.swing.JCheckBox();
        outlineLabel = new javax.swing.JLabel();
        outlineColorButton = new javax.swing.JButton();
        widthLabel = new javax.swing.JLabel();
        widthAmount = new javax.swing.JSpinner();
        useAntialiasing = new javax.swing.JCheckBox();
        palLabel = new javax.swing.JLabel();
        paletteSelector = new javax.swing.JComboBox<>();
        palettePreview = new javax.swing.JPanel();
        jobPanel = new javax.swing.JPanel();
        jobOutDir = new javax.swing.JButton();
        jobSTOP = new javax.swing.JButton();
        jobGO = new javax.swing.JButton();
        jobProgress = new javax.swing.JProgressBar();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        fileExport = new javax.swing.JMenuItem();
        fileExportAs = new javax.swing.JMenuItem();
        fileSTOP = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        fileReset = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        fileQuit = new javax.swing.JMenuItem();
        infoMenu = new javax.swing.JMenu();
        infoAbout = new javax.swing.JMenuItem();
        infoHelp = new javax.swing.JMenuItem();

        fileExporter.setDialogType(javax.swing.JFileChooser.CUSTOM_DIALOG);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Unicode Doom Font Creator - JAGUAR");
        setResizable(false);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        fontPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Font", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        fontNameLabel.setText("Font:");

        fontSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontSelectorActionPerformed(evt);
            }
        });

        fontBold.setText("Bold");
        fontBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontBoldActionPerformed(evt);
            }
        });

        fontItalic.setText("Italic");
        fontItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontItalicActionPerformed(evt);
            }
        });

        fontSizeLabel.setText("Size:");

        fontSize.setModel(new javax.swing.SpinnerNumberModel(12, 1, 120, 1));
        fontSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fontSizeStateChanged(evt);
            }
        });

        firstCharSemicolon.setText("First Char (ASCII):");

        textFirstChar.setModel(new javax.swing.SpinnerNumberModel(32, 0, 65535, 1));
        textFirstChar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                textFirstCharStateChanged(evt);
            }
        });

        lastCharSemicolon.setText("Last Char (ASCII):");

        textLastChar.setModel(new javax.swing.SpinnerNumberModel(127, 0, 65535, 1));
        textLastChar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                textLastCharStateChanged(evt);
            }
        });

        textMultiplierLabel.setText("Multiplier:");

        textMultiplier.setModel(new javax.swing.SpinnerNumberModel(1.0d, 1.0d, 10.0d, 0.1d));
        textMultiplier.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                textMultiplierStateChanged(evt);
            }
        });

        fontFormatSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Console Font", "Small Font", "Big Font", "Big Upper" }));
        fontFormatSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontFormatSelectorActionPerformed(evt);
            }
        });

        fontFormatLabel.setText("Format:");

        fontPreviewButton.setText("Preview...");
        fontPreviewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontPreviewButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Test:");

        fontTestTextField.setText("Quick Brown Fox Jumps Over The Lazy Dog");

        udfc_suppd_label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rs/alexanderstojanovich/udfc/res/udfc_suppd.png"))); // NOI18N

        javax.swing.GroupLayout fontPanelLayout = new javax.swing.GroupLayout(fontPanel);
        fontPanel.setLayout(fontPanelLayout);
        fontPanelLayout.setHorizontalGroup(
            fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fontPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fontPanelLayout.createSequentialGroup()
                        .addGap(182, 182, 182)
                        .addComponent(tstLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fontPanelLayout.createSequentialGroup()
                        .addGroup(fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(fontPanelLayout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(fontBold)
                                .addGap(12, 12, 12)
                                .addComponent(fontItalic)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(fontSizeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fontSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(fontPanelLayout.createSequentialGroup()
                                .addComponent(fontNameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fontSelector, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fontPanelLayout.createSequentialGroup()
                                .addComponent(fontFormatLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fontFormatSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fontPanelLayout.createSequentialGroup()
                                .addComponent(textMultiplierLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textMultiplier, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fontPanelLayout.createSequentialGroup()
                        .addGroup(fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(fontPanelLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fontTestTextField))
                            .addGroup(fontPanelLayout.createSequentialGroup()
                                .addComponent(firstCharSemicolon)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textFirstChar, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lastCharSemicolon)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textLastChar, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(11, 11, 11)
                        .addGroup(fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(fontPreviewButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(udfc_suppd_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        fontPanelLayout.setVerticalGroup(
            fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fontPanelLayout.createSequentialGroup()
                .addGroup(fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fontFormatLabel)
                    .addComponent(fontFormatSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fontNameLabel)
                    .addComponent(fontSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fontBold)
                    .addComponent(fontItalic)
                    .addComponent(fontSizeLabel)
                    .addComponent(fontSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textMultiplierLabel)
                    .addComponent(textMultiplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(firstCharSemicolon)
                        .addComponent(textFirstChar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lastCharSemicolon)
                        .addComponent(textLastChar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(udfc_suppd_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fontTestTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fontPreviewButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tstLabel)
                .addContainerGap())
        );

        getContentPane().add(fontPanel);

        effectsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Effects", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        fgLabel.setText("Foreground color:");

        fgButton.setBorder(null);
        fgButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fgButtonActionPerformed(evt);
            }
        });

        bgLabel.setText("Background color:");

        bgButton.setBorder(null);
        bgButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bgButtonActionPerformed(evt);
            }
        });

        useGradient.setText("Gradient");
        useGradient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useGradientActionPerformed(evt);
            }
        });

        useOutline.setText("Outline");
        useOutline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useOutlineActionPerformed(evt);
            }
        });

        outlineLabel.setText("Outline color:");

        outlineColorButton.setBorder(null);
        outlineColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outlineColorButtonActionPerformed(evt);
            }
        });

        widthLabel.setText("Width:");

        widthAmount.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));
        widthAmount.setEnabled(false);

        useAntialiasing.setText("Antialiasing");
        useAntialiasing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useAntialiasingActionPerformed(evt);
            }
        });

        palLabel.setText("Palette:");

        paletteSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "6-bit RGB", "8-bit RGB", "Doom", "Heretic", "Hexen" }));
        paletteSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paletteSelectorActionPerformed(evt);
            }
        });

        palettePreview.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Palette", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
        palettePreview.setPreferredSize(new java.awt.Dimension(240, 240));
        palettePreview.setLayout(new java.awt.GridLayout(16, 16, 1, 1));

        javax.swing.GroupLayout effectsPanelLayout = new javax.swing.GroupLayout(effectsPanel);
        effectsPanel.setLayout(effectsPanelLayout);
        effectsPanelLayout.setHorizontalGroup(
            effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(effectsPanelLayout.createSequentialGroup()
                .addGroup(effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(useGradient)
                        .addGroup(effectsPanelLayout.createSequentialGroup()
                            .addGroup(effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(useAntialiasing)
                                .addComponent(useOutline))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(widthLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(widthAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(effectsPanelLayout.createSequentialGroup()
                        .addGroup(effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fgLabel)
                            .addComponent(bgLabel)
                            .addComponent(outlineLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(palLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(paletteSelector, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(outlineColorButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bgButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fgButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(palettePreview, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        effectsPanelLayout.setVerticalGroup(
            effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(effectsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(effectsPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(palettePreview, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(effectsPanelLayout.createSequentialGroup()
                        .addGroup(effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fgLabel)
                            .addComponent(fgButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bgButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(outlineLabel)
                            .addComponent(outlineColorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(paletteSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(palLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(useGradient)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(effectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(useOutline)
                            .addComponent(widthLabel)
                            .addComponent(widthAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(useAntialiasing)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        effectsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {bgButton, fgButton, outlineColorButton});

        getContentPane().add(effectsPanel);

        jobPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Job", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jobOutDir.setText("Output Directory...");
        jobOutDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jobOutDirActionPerformed(evt);
            }
        });

        jobSTOP.setForeground(new java.awt.Color(255, 0, 0));
        jobSTOP.setText("STOP");
        jobSTOP.setEnabled(false);
        jobSTOP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jobSTOPActionPerformed(evt);
            }
        });

        jobGO.setForeground(new java.awt.Color(0, 255, 0));
        jobGO.setText("GO");
        jobGO.setEnabled(false);
        jobGO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jobGOActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jobPanelLayout = new javax.swing.GroupLayout(jobPanel);
        jobPanel.setLayout(jobPanelLayout);
        jobPanelLayout.setHorizontalGroup(
            jobPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jobPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jobPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jobProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jobPanelLayout.createSequentialGroup()
                        .addComponent(jobOutDir, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jobSTOP, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jobGO, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 5, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jobPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jobGO, jobOutDir, jobSTOP});

        jobPanelLayout.setVerticalGroup(
            jobPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jobPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jobPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jobOutDir)
                    .addComponent(jobGO)
                    .addComponent(jobSTOP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jobProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(jobPanel);

        fileMenu.setText("File");

        fileExport.setText("Export");
        fileExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileExportActionPerformed(evt);
            }
        });
        fileMenu.add(fileExport);

        fileExportAs.setText("Export As..");
        fileExportAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileExportAsActionPerformed(evt);
            }
        });
        fileMenu.add(fileExportAs);

        fileSTOP.setText("Stop");
        fileMenu.add(fileSTOP);
        fileMenu.add(jSeparator1);

        fileReset.setText("Reset");
        fileReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileResetActionPerformed(evt);
            }
        });
        fileMenu.add(fileReset);
        fileMenu.add(jSeparator2);

        fileQuit.setText("Quit");
        fileQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileQuitActionPerformed(evt);
            }
        });
        fileMenu.add(fileQuit);

        menuBar.add(fileMenu);

        infoMenu.setText("Info");

        infoAbout.setText("About");
        infoAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoAboutActionPerformed(evt);
            }
        });
        infoMenu.add(infoAbout);

        infoHelp.setText("Help");
        infoHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoHelpActionPerformed(evt);
            }
        });
        infoMenu.add(infoHelp);

        menuBar.add(infoMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jobOutDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jobOutDirActionPerformed
        // TODO add your handling code here:
        this.chooseDstDir();
    }//GEN-LAST:event_jobOutDirActionPerformed
    
    private void fileQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileQuitActionPerformed
        // TODO add your handling code here:
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_fileQuitActionPerformed
    
    private void fileResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileResetActionPerformed
        // TODO add your handling code here:
        this.reset();
    }//GEN-LAST:event_fileResetActionPerformed
    
    private void paletteSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paletteSelectorActionPerformed
        // TODO add your handling code here:
        this.guiLogic.loadPalette((String) paletteSelector.getSelectedItem());
        this.guiLogic.displayPalette();
    }//GEN-LAST:event_paletteSelectorActionPerformed
    
    private void fontSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontSelectorActionPerformed
        // TODO add your handling code here:
        Font font;
        if (fontBold.isSelected() && fontItalic.isSelected()) {
            font = new Font((String) fontSelector.getSelectedItem(), Font.BOLD + Font.ITALIC, (Integer) fontSize.getValue());
        } else if (fontBold.isSelected()) {
            font = new Font((String) fontSelector.getSelectedItem(), Font.BOLD, (Integer) fontSize.getValue());
        } else if (fontItalic.isSelected()) {
            font = new Font((String) fontSelector.getSelectedItem(), Font.ITALIC, (Integer) fontSize.getValue());
        } else {
            font = new Font((String) fontSelector.getSelectedItem(), Font.PLAIN, (Integer) fontSize.getValue());
        }
        if (this.guiLogic != null) {
            this.guiLogic.setMyFont(font);
        }
    }//GEN-LAST:event_fontSelectorActionPerformed
    
    private void fileExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileExportActionPerformed
        // TODO add your handling code here:
        if (dstFile == null) {
            chooseDstDir();
        }
        synchronized (this.guiLogic.getSyncObj()) {
            this.guiLogic.getSyncObj().notify();
        }
    }//GEN-LAST:event_fileExportActionPerformed
    
    private void fileExportAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileExportAsActionPerformed
        // TODO add your handling code here:
        chooseDstDir();
        synchronized (this.guiLogic.getSyncObj()) {
            this.guiLogic.getSyncObj().notify();
        }
    }//GEN-LAST:event_fileExportAsActionPerformed
    
    private void fontSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fontSizeStateChanged
        // TODO add your handling code here:
        updateFont();
    }//GEN-LAST:event_fontSizeStateChanged
    
    private void textMultiplierStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_textMultiplierStateChanged
        // TODO add your handling code here:
        guiLogic.setMultiplier((float) this.textMultiplier.getValue());
    }//GEN-LAST:event_textMultiplierStateChanged
    
    private void useOutlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useOutlineActionPerformed
        // TODO add your handling code here:
        if (useOutline.isSelected()) {
            this.widthAmount.setEnabled(true);
            guiLogic.setOutlineWidth((int) this.widthAmount.getValue());
        } else {
            this.widthAmount.setEnabled(false);
            guiLogic.setOutlineWidth(0);
        }
    }//GEN-LAST:event_useOutlineActionPerformed
    
    private void jobGOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jobGOActionPerformed
        // TODO add your handling code here
        synchronized (this.guiLogic.getSyncObj()) {
            this.guiLogic.getSyncObj().notify();
        }
    }//GEN-LAST:event_jobGOActionPerformed
    
    private void fontBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontBoldActionPerformed
        // TODO add your handling code here:
        updateFont();
    }//GEN-LAST:event_fontBoldActionPerformed
    
    private void fontItalicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontItalicActionPerformed
        // TODO add your handling code here:
        updateFont();
    }//GEN-LAST:event_fontItalicActionPerformed
    
    private void textFirstCharStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_textFirstCharStateChanged
        // TODO add your handling code here:
        guiLogic.setBeginChar((int) textFirstChar.getValue());
    }//GEN-LAST:event_textFirstCharStateChanged
    
    private void textLastCharStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_textLastCharStateChanged
        // TODO add your handling code here:
        guiLogic.setEndChar((int) textLastChar.getValue());
    }//GEN-LAST:event_textLastCharStateChanged
    
    private void useGradientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useGradientActionPerformed
        // TODO add your handling code here:
        guiLogic.setUseGradient(useGradient.isSelected());
    }//GEN-LAST:event_useGradientActionPerformed
    
    private void useAntialiasingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useAntialiasingActionPerformed
        // TODO add your handling code here:
        guiLogic.setUseAntialias(useAntialiasing.isSelected());
    }//GEN-LAST:event_useAntialiasingActionPerformed
    
    private void outlineColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outlineColorButtonActionPerformed
        // TODO add your handling code here:
        Color color = JColorChooser.showDialog(this, "Choose Outline Color", this.guiLogic.getOutlineColor());
        if (color != null) {
            this.guiLogic.setOutlineColor(color);
            this.outlineColorButton.setBackground(color);
        }
    }//GEN-LAST:event_outlineColorButtonActionPerformed
    
    private void bgButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bgButtonActionPerformed
        // TODO add your handling code here:
        Color color = JColorChooser.showDialog(this, "Choose Background Color", this.guiLogic.getBgColor());
        if (color != null) {
            this.guiLogic.setBgColor(color);
            this.bgButton.setBackground(color);
        }
    }//GEN-LAST:event_bgButtonActionPerformed
    
    private void fgButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fgButtonActionPerformed
        // TODO add your handling code here:
        Color color = JColorChooser.showDialog(this, "Choose Foreground Color", this.guiLogic.getFgColor());
        if (color != null) {
            this.guiLogic.setFgColor(color);
            this.fgButton.setBackground(color);
        }
    }//GEN-LAST:event_fgButtonActionPerformed
    
    private void jobSTOPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jobSTOPActionPerformed
        // TODO add your handling code here:
        guiLogic.setReqSTOP(true);
    }//GEN-LAST:event_jobSTOPActionPerformed
    
    private void fontFormatSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontFormatSelectorActionPerformed
        // TODO add your handling code here:
        guiLogic.setFontFormat((String) fontFormatSelector.getSelectedItem());
    }//GEN-LAST:event_fontFormatSelectorActionPerformed
    
    private void fontPreviewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontPreviewButtonActionPerformed
        // TODO add your handling code here:
        guiLogic.preview(this.fontTestTextField.getText());
    }//GEN-LAST:event_fontPreviewButtonActionPerformed
    
    private void infoAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoAboutActionPerformed
        // TODO add your handling code here:
        infoAbout();
    }//GEN-LAST:event_infoAboutActionPerformed
    
    private void infoHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoHelpActionPerformed
        // TODO add your handling code here:
        infoHelp();
    }//GEN-LAST:event_infoHelpActionPerformed

    // Center the GUI window into center of the screen
    private void initPosition() {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
    }

    // Fetch all the fonts (their names) installed on the system (this OS)
    private static ArrayList<String> getAllFontFamily() {
        ArrayList<String> names = new ArrayList<String>();
        GraphicsEnvironment graphEnvi = GraphicsEnvironment.getLocalGraphicsEnvironment();
        Font[] fonts = graphEnvi.getAllFonts();
        for (Font font : fonts) {
            if (!names.contains(font.getFamily())) {
                names.add(font.getFamily());
            }
        }
        return names;
    }

    // initializes font selection for making the BMF, combo box
    private void initFontSelector() {
        ArrayList<String> familyNames = getAllFontFamily();
        for (int i = 0; i < familyNames.size(); i++) {
            fontSelector.addItem(familyNames.get(i));
        }
    }

    // initializes color buttons (foreground, background and outline)
    private void initColorButtons() {
        this.fgButton.setBackground(Color.YELLOW);
        this.bgButton.setBackground(Color.CYAN);
        this.outlineColorButton.setBackground(Color.BLUE);
    }
    
    private void initDialog() {
        FileNameExtensionFilter filter = new FileNameExtensionFilter("ZDoom pk3 archive (*.pk3)", "pk3");
        this.fileExporter.setFileFilter(filter);
    }
    
    private void updateFont() {
        Font font;
        if (fontBold.isSelected() && fontItalic.isSelected()) {
            font = new Font((String) fontSelector.getSelectedItem(), Font.BOLD + Font.ITALIC, (Integer) fontSize.getValue());
        } else if (fontBold.isSelected()) {
            font = new Font((String) fontSelector.getSelectedItem(), Font.BOLD, (Integer) fontSize.getValue());
        } else if (fontItalic.isSelected()) {
            font = new Font((String) fontSelector.getSelectedItem(), Font.ITALIC, (Integer) fontSize.getValue());
        } else {
            font = new Font((String) fontSelector.getSelectedItem(), Font.PLAIN, (Integer) fontSize.getValue());
        }
        if (this.guiLogic != null) {
            this.guiLogic.setMyFont(font);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
            UIManager.setLookAndFeel("com.bulenkov.darcula.DarculaLaf");
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                GUI gui = new GUI();
                gui.setVisible(true);
                gui.guiLogic.getJobWorker().start();
            }
        });
    }
    
    private void chooseDstDir() {
        // so in order to save Font we need either to be loaded
        // or image from which we generate to be not null..        
        int returnVal = fileExporter.showDialog(this, "Output Directory");
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            this.dstFile = fileExporter.getSelectedFile();
            this.guiLogic.setFontPK3(dstFile);
            this.jobGO.setEnabled(true);
        }
    }

    // init both logos
    private void initUDFCLogos() {
        URL url_logo = getClass().getResource(RESOURCES_DIR + LOGO_FILE_NAME);
        URL url_logox = getClass().getResource(RESOURCES_DIR + LOGOX_FILE_NAME);
        if (url_logo != null && url_logox != null) {
            ImageIcon logo = new ImageIcon(url_logo);
            ImageIcon logox = new ImageIcon(url_logox);
            ArrayList<Image> icons = new ArrayList<Image>();
            icons.add(logo.getImage());
            icons.add(logox.getImage());
            icons.add(logox.getImage());
            this.setIconImages(icons);//.getScaledInstance(23, 14, Image.SCALE_SMOOTH));
        }
    }

    // info about the program
    private void infoAbout() {
        URL icon_url = getClass().getResource(RESOURCES_DIR + LICENSE_LOGO_FILE_NAME);
        if (icon_url != null) {
            StringBuilder sb = new StringBuilder();
            sb.append("<html><b>VERSION 1.0.1 - JAGUAR (PUBLIC BUILD reviewed on 2019-09-07 at 19:30).</b></html>\n");
            sb.append("<html><b>This software is free software, </b></html>\n");
            sb.append("<html><b>licensed under GNU General Public License (GPL).</b></html>\n");
            sb.append("\n");
            sb.append("Changelog:\n");
            sb.append("\t- Fixed displaying two messages, one after the other\n");
            sb.append("\t  when job is terminated (stopped by the user).\n");
            sb.append("\t- Disabling reset when job is under way.\n");
            sb.append("\t- Label \"Font preview:\" when preview is clicked is deleted.\n");
            sb.append("\t  Obscuring the preview.\n");
            sb.append("\n");
            sb.append("Objective:\n");
            sb.append("\tThe purpose of this program is creating Unicode Fonts for \n");
            sb.append("\tthe newest releases of GZDoom.\n");
            sb.append("\n");
            sb.append("<html><b>Copyright © 2019</b></html>\n");
            sb.append("<html><b>Alexander \"Ermac\" Stojanovich</b></html>\n");
            ImageIcon icon = new ImageIcon(icon_url);
            JOptionPane.showMessageDialog(this, sb.toString(), "About", JOptionPane.INFORMATION_MESSAGE, icon);
        }
    }

    // method to display help (read from the file)
    private void infoHelp() {
        InputStream help_in = getClass().getResourceAsStream(RESOURCES_DIR + HELP_FILE_NAME);
        URL icon_url = getClass().getResource(RESOURCES_DIR + LOGOX_FILE_NAME);
        if (help_in != null && icon_url != null) {
            try {
                BufferedReader br = new BufferedReader(new InputStreamReader(help_in));
                String line;
                String displayMsg = "";
                while ((line = br.readLine()) != null) {
                    displayMsg += line + "\n";
                }
                br.close();
                ImageIcon icon = new ImageIcon(icon_url);
                JOptionPane.showMessageDialog(this, displayMsg, "Help", JOptionPane.INFORMATION_MESSAGE, icon);
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    public void reset() {
        this.fontSelector.setSelectedIndex(0);
        this.fontBold.setSelected(false);
        this.fontItalic.setSelected(false);
        this.fontSize.setValue(12);
        this.textFirstChar.setValue(32);
        this.textLastChar.setValue(127);
        this.textMultiplier.setValue(1.0);
        
        this.fontFormatSelector.setSelectedIndex(0);
        this.fontTestTextField.setText("Quick Brown Fox Jumps Over The Lazy Dog");
        
        this.fgButton.setBackground(Color.YELLOW);
        this.bgButton.setBackground(Color.CYAN);
        this.outlineColorButton.setBackground(Color.BLUE);
        this.widthAmount.setValue(1);
        this.widthAmount.setEnabled(false);
        this.paletteSelector.setSelectedIndex(0);
        
        this.useGradient.setSelected(false);
        this.useOutline.setSelected(false);
        this.useAntialiasing.setSelected(false);
        this.widthAmount.setValue(1);
        
        this.dstFile = null;
        this.jobGO.setEnabled(false);
        this.jobProgress.setValue(0);
        
        this.guiLogic.reset();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bgButton;
    private javax.swing.JLabel bgLabel;
    private javax.swing.JPanel effectsPanel;
    private javax.swing.JButton fgButton;
    private javax.swing.JLabel fgLabel;
    private javax.swing.JMenuItem fileExport;
    private javax.swing.JMenuItem fileExportAs;
    private javax.swing.JFileChooser fileExporter;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fileQuit;
    private javax.swing.JMenuItem fileReset;
    private javax.swing.JMenuItem fileSTOP;
    private javax.swing.JLabel firstCharSemicolon;
    private javax.swing.JCheckBox fontBold;
    private javax.swing.JLabel fontFormatLabel;
    private javax.swing.JComboBox<String> fontFormatSelector;
    private javax.swing.JCheckBox fontItalic;
    private javax.swing.JLabel fontNameLabel;
    private javax.swing.JPanel fontPanel;
    private javax.swing.JButton fontPreviewButton;
    private javax.swing.JComboBox<String> fontSelector;
    private javax.swing.JSpinner fontSize;
    private javax.swing.JLabel fontSizeLabel;
    private javax.swing.JTextField fontTestTextField;
    private javax.swing.JMenuItem infoAbout;
    private javax.swing.JMenuItem infoHelp;
    private javax.swing.JMenu infoMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JButton jobGO;
    private javax.swing.JButton jobOutDir;
    private javax.swing.JPanel jobPanel;
    private javax.swing.JProgressBar jobProgress;
    private javax.swing.JButton jobSTOP;
    private javax.swing.JLabel lastCharSemicolon;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton outlineColorButton;
    private javax.swing.JLabel outlineLabel;
    private javax.swing.JLabel palLabel;
    private javax.swing.JPanel palettePreview;
    private javax.swing.JComboBox<String> paletteSelector;
    private javax.swing.JSpinner textFirstChar;
    private javax.swing.JSpinner textLastChar;
    private javax.swing.JSpinner textMultiplier;
    private javax.swing.JLabel textMultiplierLabel;
    private javax.swing.JLabel tstLabel;
    private javax.swing.JLabel udfc_suppd_label;
    private javax.swing.JCheckBox useAntialiasing;
    private javax.swing.JCheckBox useGradient;
    private javax.swing.JCheckBox useOutline;
    private javax.swing.JSpinner widthAmount;
    private javax.swing.JLabel widthLabel;
    // End of variables declaration//GEN-END:variables
}
